/////////////////////////////////////////////////////////////////////////////////
// This programme could probably be written in a cleaner fashion.
// I drew upon multiple sources for the data to decorate the various
// facets, realms in POL speak. Thanks to the ServUO community for
// their invaluable config files and to the original POL developers
// who provided a prepopuulated data directory for pre POL 0.96
// versions. Without those two sources this project would not have
// been possible. Also I must thank ThisIsMe for extracting the
// doorsinit, lightsinit, and signsinit cfg files using the ServUO
// server as a data source.
//
// The facets (realms) are decorated for the Mondain's Legacy era
// maps. My intention is to include other UO expansions in future
// updates but there is a lot of work and experimentation to be
// done before this can happen. The geography of Felucca and Trammel
// has changed in later expansions especially with the addition of
// the "bazaar" in Magincia. Land elevations make some of the
// structures from Mondain's Legacy era maps unusable.
//
// I hope this is useful for your server.
// Sincerely,
// Yukiko "Kiko"
// POL Distro development leader.
//
// To do: Save output to a log file with date and time stamp.
/////////////////////////////////////////////////////////////////////////////////

use uo;
use cfgfile;
use file;
use polsys;
use cliloc;

include ":decorateServer:teleporters";
include ":clilocs:clilocs";
include ":timeutils:time";
include "include/arrays";
include ":gumps:gumps";

program decoratefacets(who, text)

	var things := array {};			// Holds the array of keys (ObjTypes) of the items to be placed.
	var places := array {};			// Holds the list of locations to place an item
	var selected_facets := array {}; // An array that contains the facets to be decorated.
	var element := "";				// Holds a cfg file element reference
	var object := 0;				// The integer value of the items ObjType
	var map := "";					// The realm to place the item
	var LogFile := "::/log/DecorateFacets";
	// These things must be cleared for each new object
	var itemname := "";			// Holds the items name if specified.
	var labelnum := 0;			// A cliloc reference that will be used to assign a name to an item if specified.
	var clilocnum := 0;			// A liloc ref to a failure message that will be sent upon failure of an event.
	var hue := 0;				// The color to be assigned to an item if specified.
	var bookspawn := 0;			// If set adds the book shelf to the global book spawn system.
	var itemamount := 1;		// Where more than 1 we need to create a stack.
	/////////////////////////////////////////////////////////////////////
	var itemsthere := array {};	// Holder for anything at the location where the item is being placed.
	var locxyz := array {};		// The coords where an item is to be placed.
	var dynamics := array {};	// Array to hold results of ListItemsAtLocation.
	var statics := array {};	// Array to hold results of ListStaticsAtLocation
	var createdthing := 0;		// The objref to the item when created
	var createtheitem := 1;		// Flag used with duplicate statics check.
	var files := array {};		// The array that holds the file list for a directory
	var decorations := 0;		// The variable that holds the reference to the contents of the cfg files.
	var itemx, itemy, itemz, container, graphic;
	var decorate_all := 0;

//////////////////////////////////////////////////////////////////////////////////////////////////
//
// This section initialises items, some are missing statics like the centre tiles of some of the
// marked teleporter sites, and decorations in the different facets (realms). I have taken some
// care not to duplicate items but there could be the possibility of two of the same it being
// placed at the same location.
//
//////////////////////////////////////////////////////////////////////////////////////////////////
	if(CInt(text) == "all")
		decorate_all := 1;
	endif
	selected_facets := DecorateFacetsGump ( who, decorate_all );
	LogToFile(LogFile, "decoratefacets: Initialising the facets (realms) for Mondain's Legacy maps.", 1);
	foreach UOMap in selected_facets
		var directories := ListDirectory( ":DecorateServer:config/", LISTDIR_NO_FILES, LISTDIR_LIST_DIRS );
		foreach directory in directories
			LogToFile(LogFile, "decoratefacets: Processing directory: " + directory, 1);
			files := ListDirectory( ":DecorateServer:decorations/" + directory, LISTDIR_ALL_FILES, LISTDIR_DONT_LIST_DIRS );
			foreach fileref in files
				fileref := fileref[1, Len(fileref) - 4];
				decorations := UnloadConfigFile(":decorateServer:config/" + directory + "/" + fileref);
				decorations := ReadConfigFile(":decorateServer:config/" + directory + "/" + fileref);
				if(decorations.errortext)
					if(!YesNoSpecial(who, "decoratefacets: " + CStr(fileref) + ": " + decorations.errortext));
						return 0;
					endif
				endif
				element := FindConfigElem( decorations, "Realm" );
				map := GetConfigString(element, "Map");

				LogToFile(LogFile, "decoratefacets: Processing file: " + fileref, 1);

				///////////////////////////////////////////////////////////////////////////////
				things := GetConfigStringKeys( decorations );
				//if(map in selected_facets)
					foreach thing in things
						element := FindConfigElem( decorations, thing );
						object := CInt(thing);

						itemname := "";
						labelnum := 0;
						bookspawn := 0;
						hue := 0;
						clilocnum := 0;

						itemname := GetConfigString(element, "Name");
						hue := CInt(GetConfigString(element, "Hue"));
						labelnum := GetConfigString(element, "LabelNumber");
						bookspawn := CInt(GetConfigString(element, "BookSpawn"));
						itemamount := CInt(GetConfigString(element, "Amount"));
						places := GetConfigStringArray( element, "Location" );
						foreach place in places
							locxyz := SplitWords(place);

							// Don't place an item if there's a matching dynamic or static item already there.
							// Preset the flag to create the item.
							createtheitem := 1;
							dynamics := ListItemsAtLocation( CInt(locxyz[1]), CInt(locxyz[2]), CInt(locxyz[3]), map );
							foreach item in dynamics
								if(CInt(object) == item.objtype)
									createtheitem := 0;
								endif
							endforeach
							statics := ListStaticsAtLocation( CInt(locxyz[1]), CInt(locxyz[2]), CInt(locxyz[3]),  ITEMS_IGNORE_MULTIS, map );
							if(Len(statics))
								foreach static in statics
									if(object == static.objtype)
										createtheitem := 0;
									endif
								endforeach
							endif
								if(createtheitem)
									if(!itemamount)
										itemamount := 1;
									endif
									createdthing := CreateItemAtLocation(CInt(locxyz[1]), CInt(locxyz[2]), CInt(locxyz[3]), object, itemamount, map);


									if(hue)
										createdthing.color := hue;
									endif
									if(itemname)
										createdthing.name := itemname;
									endif
									if(labelnum)
										createdthing.name := CL_GetCliloc(labelnum);
									endif
									///////////////////////////////////////////////////////////////////////////////
									// Needed for book shelves that spawn books
									// Any bookcase that was named LibraryBookcase by ServUO was given
									// the BookSpawn member in the cfg files.
									//
									// Commented out do to control script causing excess server load.
									// Shard devs can decide if they want all book shelves that are
									// the full shelf graphic to spawn books or they can use the command
									// spawnshelf to set certain shelves with the full book graphic to spawn.
									//if(bookspawn)
									//	SetObjProperty(createdthing, "Spawn", "Yes");
									//endif
									///////////////////////////////////////////////////////////////////////////////
									SetObjProperty(createdthing, "Permanent", 1);
									createdthing.movable := 0;
								endif	// creattheitem
								sleepms(5);
						endforeach		// place in places
						Sleepms(5);
					endforeach			// thing in things
				//endif					// map in selected_facets
				sleepms(5);
			endforeach					// fileref in files
			sleepms(5);
		endforeach					// directory in directories


	//////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// This section initialises doors, lights, and signs in Ilshenar, Malas, Tokuno, and Termur from
	// the config files xilshenar.cfg, xmalas.cfg, xtokuno.cfg, and xtermur.cfg.
	//
	//////////////////////////////////////////////////////////////////////////////////////////////////
		LogToFile(LogFile, "decoratefacets: Phase 2...", 1);

		files := {"doorsInit", "signsInit", "lightsInit"};
		foreach fileref in files
			decorations := UnloadConfigFile(":decorateServer:" + fileref);
			decorations := ReadConfigFile(":decorateServer:" + fileref);
			if(decorations.errortext)
				if(!YesNoSpecial(who, "decoratefacets: " + CStr(fileref) + ": " + decorations.errortext));
					return 0;
				endif
			endif

			things := GetConfigIntKeys( decorations );
			foreach thing in things
				element := FindConfigElem( decorations, thing );
				object := Hex(CInt(GetConfigString(element, "ID")));
				container := GetConfigString(element, "X");
				itemx := GetConfigString(element, "X");
				itemy := GetConfigString(element, "Y");
				itemz := GetConfigString(element, "Z");
				map := Lower(GetConfigString(element, "REALM"));
				case(map)
					"felucca":	map := "britannia";
					"trammel":	map := "britannia_alt";
				endcase
				//if(map in selected_facets)
					sleepms(5);
						itemname := "";
						hue := 0;

						itemname := GetConfigString(element, "NAME");

						hue := CInt(GetConfigString(element, "COLOR"));
						createtheitem := 1;
						// If the item already exists then we don't want to place a second item there.
						itemsthere := ListItemsAtLocation( CInt(itemx), CInt(itemy), CInt(itemz), map );
						foreach item in itemsthere
							if(CInt(object) == item.objtype)
								createtheitem := 0;
							endif
						endforeach
						// We don't want to create any custom objects.
						if(CInt(object) > 0xFFFF)
							createtheitem := 0;
						endif
						if(createtheitem)
							if(!itemamount)
								itemamount := 1;
							endif
							createdthing := CreateItemAtLocation(CInt(itemx), CInt(itemy), CInt(itemz), CInt(object), itemamount, map);
							if(!createdthing)
								// Would like this to be in a yes/no gump
								LogToFile(LogFile, "decoratefacets: Couldn't create the item" + CStr(object) +" " +  CStr(itemx) + " " + CStr(itemy) + " " +CStr(itemz) + " in realm " + map, 1);
								LogToFile(LogFile, "decoratefacets: The item is in the file " + ":decorateServer:" + fileref, 1);
								LogToFile(LogFile, "decoratefacets: " + createdthing.errortext, 1);
								// return;
							endif

							if(hue)
								createdthing.color := hue;
							endif
							if(itemname)
								createdthing.name := CL_GetCliloc(itemname);
							endif
							SetObjProperty(createdthing, "Permanent", 1);
							createdthing.movable := 0;
						endif					// creattheitem
					//endif						// map in selected_facets
				sleepms(5);
			endforeach					// thing in things
		endforeach						// fileref in files

	///////////////////////////////////////////////////////////////////////////////////
	//
	// This section initialises Felucca (britannia) and Trammel (britannia_alt) from
	// the files Felucca.cfg and Trammel.cfg.
	//
	////////////////////////////////////////////////////////////////////////////////////

		files := {"xfelucca", "xtrammel"};
		foreach fileref in files
			decorations := UnloadConfigFile(":decorateServer:" + fileref);
			decorations := ReadConfigFile(":decorateServer:" + fileref);
			if(decorations.errortext)
				if(!YesNoSpecial(who, "decoratefacets: " + CStr(fileref) + ": " + decorations.errortext));
					return 0;
				endif
			endif
			element := FindConfigElem( decorations, "Realm" );
			map := GetConfigString(element, "Map");

			if(map == UOMap)
				LogToFile(LogFile, "decoratefacets: Processing realm: " + map, 1);

				things := GetConfigIntKeys( decorations );
				foreach thing in things
					element := FindConfigElem( decorations, thing );
					object := CInt(GetConfigString(element, "ObjType"));
					itemx := CInt(GetConfigString(element, "X"));
					itemy := CInt(GetConfigString(element, "Y"));
					itemz := CInt(GetConfigString(element, "Z"));
					sleepms(5);
					itemname := "";
					hue := 0;

					itemname := GetConfigString(element, "Name");
					hue := CInt(GetConfigString(element, "Color"));
					graphic := CInt(GetConfigString(element, "Graphic"));
					// Left over items in containers have to be scrapped.
					// I didn't scrub them from the items.txt file.
					container := GetConfigInt(element, "Container");
					createtheitem := 1;
					// If the item already exists then we don't want to place a second item there.
					itemsthere := ListItemsAtLocation( CInt(itemx), CInt(itemy), CInt(itemz), map );
					//foreach item in itemsthere

						//if(Len(itemsthere))
						if(itemsthere.size())
							createtheitem := 0;
						endif
					//endforeach
					// This to prevent lamp posts being duplicated nearby.
					itemsthere := ListItemsNearLocationOfType( CInt(itemx), CInt(itemy), LIST_IGNORE_Z, 2, 0xB20, map );
					foreach item in itemsthere
						if(CInt(object) == CInt(item))
							createtheitem := 0;
						endif
					endforeach
					// Leave out book shelves. The
					if(CInt(object) in {0xA97, 0xA98, 0xA99, 0xA9A, 0xA9B, 0xA9C, 0xA9D, 0xA9E} )
						createtheitem := 0;
					endif

					// We don't want to create any custom objects or anything in a container.
					if(CInt(object) > 0xFFFF || container)
						createtheitem := 0;
					endif
					if(createtheitem)
						if(!itemamount)
							itemamount := 1;
						endif
						createdthing := CreateItemAtLocation(CInt(itemx), CInt(itemy), CInt(itemz), CInt(object), itemamount, map);
						if(!createdthing)
							// Would like this to be in a yes/no gump
							LogToFile(LogFile, "decoratefacets: Couldn't create the item " + itemname + ", ObjType " + CStr(Hex(object)) + ", at " +  CStr(itemx) + " " + CStr(itemy) + " " +CStr(itemz), 1);
							LogToFile(LogFile, "decoratefacets: " + createdthing.errortext, 1);
							// return 0;
						endif

						if(graphic)
							createdthing.graphic := CInt(graphic);
						endif
						if(hue)
							createdthing.color := hue;
						endif
						if(itemname)
							createdthing.name := itemname;
						endif
						SetObjProperty(createdthing, "Permanent", 1);
						createdthing.movable := 0;
					endif					// createtheitem
					sleepms(5);
				endforeach					// thing in things
			endif							// map == UOMap
		endforeach							// fileref in files

		LogToFile(LogFile, "Adding teleporters to the selected facets...", 1);
		CreateTeleporters(UOMap);

		SetGlobalProperty(UOMap + "_Decorated", 1);
		SaveWorldState();

	endforeach								// UOMap in selected_facets



	LogToFile(LogFile, "decoratefacets: Finished decorating the selected facets.", 1);

endprogram

function DecorateFacetsGump ( who, check_all := 0 )
	var continuousloop := 1;
	var deco_these := Array {};
	var facet_list := Array { "britannia", "britannia_alt", "ilshenar", "malas", "tokuno", "termur", "eoden" };
	var facet_clilocs := Array { 1012001, 1012000, 1012002, 1060643, 1063258, 1112178, 1156262 };
	// "eoden" is only named for future reference. Research needs to be made as to what needs to be added to that
	// facet for deco purposes and if it is even a separate map file or is it part of termur which it might be
	// much like The Lost Lands being part of Felucca and Trammel.
	while ( continuousloop )
		var paper_modifier := CInt( 0 );
		var present_facets := Array {};
		var multiplier, ArrayPlace, RealmY, RealmCheck;
		var facet_gump := GFCreateGump ( 250, 200 );
		GFClosable ( facet_gump, 0 );
		GFMovable ( facet_gump, 0 );
		GFPage ( facet_gump, 0 );
		GFResizePic ( facet_gump, 0, 0, 9200, 280, 375 );
		GFHTMLArea ( facet_gump, 10, 10, 260, 26, "DECORATE WHICH FACETS?:", 1, 0 ); // Title

		// Generated the size of the "Paper" background and a list of present facets
		foreach relm in realms()
			relm := relm;
			foreach facet_name in facet_list
				if ( _relm_iter == facet_name  )
					paper_modifier += 1;
					present_facets.Append ( facet_clilocs[CInt(_facet_name_iter)] );
				endif
			endforeach
		endforeach

		GFResizePic ( facet_gump, 10, 40, 3000, 260, CInt ( 34 * paper_modifier ) );

		foreach facet in present_facets
			multiplier := CInt ( _facet_iter - 1 );
			RealmY := CInt ( 54 + ( 32 * ( multiplier % 7 ) ) );
			RealmCheck := CInt ( 49 + ( 32 * ( multiplier % 7 ) ) );
			// Need to grab the place within the array the facet cliloc number is to check against
			// POL's funky facet names
			ArrayPlace := facet in facet_clilocs;
			if ( !GetGlobalProperty ( CStr ( facet_list[CInt ( ArrayPlace )]+"_Decorated" ) ) )
				GFCheckBox ( facet_gump, 15, RealmCheck, 9792, 9793, check_all, facet ); // Facet Check Box
				GFAddHTMLLocalized ( facet_gump, 40, RealmY, 220, 26, facet, 0, 0, 0x7C00  ); // Facet Name
			else
				GFAddHTMLLocalized ( facet_gump, 40, RealmY, 220, 26, facet, 0, 0, 0x1F ); // Facet Name
			endif
		endforeach

		GFAddButton ( facet_gump, 15, 282, 4005, 4007, GF_CLOSE_BTN, 99 );
		if ( !check_all )
			GFHTMLArea ( facet_gump, 50, 279, 220, 26, "SELECT ALL REALMS", 1, 0 );
			check_all := 1;
		else
			GFHTMLArea ( facet_gump, 50, 279, 220, 26, "DESELECT REALMS", 1, 0 );
			check_all := 0;
		endif

		GFAddButton ( facet_gump, 15, 311, 4005, 4007, GF_CLOSE_BTN, 33 );
		GFAddHTMLLocalized ( facet_gump, 50, 309, 220, 26, 1011011, 1, 0 ); // CONTINUE
		GFAddButton ( facet_gump, 15, 340, 4005, 4007, GF_CLOSE_BTN, 66 );
		GFAddHTMLLocalized ( facet_gump, 50, 338, 220, 26, 1011012, 1, 0 ); // CANCEL

		var result := GFSendGump ( who, facet_gump );
		var facet_toggle := 0;
		foreach key in ( result.keys )
			if ( 99 in result.keys )
				facet_toggle := 99;
			endif

			if ( !result || 66 in result.keys )
				SendSysMessageCL ( who, 1071555, color := 34 ); // Canceled operation.
				return 0;
			endif

			if ( 33 in result.keys )
				if ( key in facet_clilocs );
					foreach clil in facet_clilocs
						if ( key == clil )
							deco_these.Append ( facet_list[CInt(_clil_iter)] );
						endif
					endforeach
				endif
			endif
		endforeach

		if ( facet_toggle != 99 )
			continuousloop := 0;
		endif
	endwhile

	return deco_these;

endfunction

/*
* YesNo Gump by Kinetix
* Version 2.0
* This new gump will actually extend itself based on the length of your prompt text, which means
*  the text/gump overlap bug is gone.
*/

function YesNoSpecial(me, message, color := "#FFFFFF")
  var extra := "Do you wish to continue?";
  message := message + " " + extra;
  var lenny := cint(len(message) * 2)+160;
  if(lenny < 180) lenny := 180; endif
  var layout := array(
     "nodispose",
     "page 0",
     "resizepic 30 30 5054 "+ lenny +" 110",
     "gumppictiled 41 41 "+ (lenny - 22) +" 88 2624",
     "checkertrans 40 40 "+ (lenny - 20) +" 90",
     "htmlgump 40 45 "+ (lenny - 19) +" 59 0 0 0",
     "button 50 102 4023 4025 1 0 1",
     "button "+ (lenny - 20) +" 102 4017 4019 1 0 0"
  );
  var data := array("<basefont color=\""+ color +"\"><center>"+ message +"</center></basefont");
  var res := SendDialogGump( me, layout, data );
  if (res)
     return 1;
  else
     return 0;
  endif
endfunction

